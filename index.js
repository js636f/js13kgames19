const canvas = document.getElementById("game");
const ctx = canvas.getContext("2d");
const width = canvas.width;
const height = canvas.height;

const canvasData = document.getElementById("gameData");
const ctxData = canvasData.getContext("2d");
const widthD = canvasData.width;
const heightD = canvasData.height;

const fieldSize = 540;
const fieldSizeForDrawing = fieldSize + 1;
const borderWidth = 1;

const mainLevels = [
  '{"n":"Main Level 1","hvs":[0,0],"e":[26,26],"l":100,"cs":20,"hl":10}',
  '{"n":"Main Level 2","hvs":[13,12],"e":[14,12],"l":100,"cs":20,"hl":7}',
  '{"n":"Main Level 3","hvs":[13,0],"e":[13,26],"l":200,"cs":20,"hl":7}',
  '{"n":"Main Level 4","hvs":[0,0],"e":[26,26],"l":1,"cs":20,"hl":15}',
  '{"n":"Main Level 5","hv":"000000000000000100000000000000000000010000000000000101010101000000000000011000000000000010101011000000000001011100000000000000000000000000000111011110000000001000000000000000001111011111100000001101000000000000001111011111111010111111000000000000001111011111111111111111000000000000001111011111111111111001000000000000011111011111111111010000000000000000111111011111111110001010000000000001111111011111111100010101000000000011111111011111111000101011100000000111111111011111110000010111110000000111111111011111100001101111100100000111111111011111000011101111001000000111111111011110000111101110010000001111111111011110001111110100100000011111111111011111001111011001000000111111111111011111110111000000000001111111111111011110001011011001010011111111111111011100000001000110111111111111111111011000000111000111111111110111111111011000001110000100101111100011111111011100011100001100000011000001111111011110001000001100000010000000111111001111000000011100000100000000011111010111111000111101011000000001001111011011110001111110100000000010101111011111100001111110110111010100101111010011100000111000101001101001101111010001100000110000010110110110001111010001100000100000000000000000000111010000100101000000000000000000000011010001101010100000000000000000000001000000000000000000000000000000000000","s":[15,19],"e":[35,0],"l":100,"cs":15,"hl":6}',
  '{"n":"Main Level 6","hvs":[19,24],"e":[32,2],"l":100,"cs":15,"hl":9}',
  '{"n":"Main Level 7","hvs":[0,0],"e":[35,35],"l":1,"cs":15,"hl":25}',
  '{"n":"Main Level 8","hvs":[0,0],"e":[53,53],"l":300,"cs":10,"hl":26}',
  '{"n":"Main Level 9","hvs":[27,26],"e":[53,53],"l":2,"cs":10,"hl":14}',
  '{"n":"Main Level 10","hvs":[26,14],"e":[27,50],"l":5,"cs":10,"hl":10}'
];

const storageRecordPrefix = "DNTGBJS636FR";
const storageMainChallengeKey = "DNTGBJS636FFIN";
const storageLevelPrefix = "DNTGBJS636FL";

const playerColor = "rgb(18, 125, 255)";
const endPosColor = "rgba(0, 255, 0, 0.5)";
const visitedColors = [
  "rgba(245, 177, 177, 0.4)",
  "rgba(245, 142, 142, 0.5)",
  "rgba(245, 100, 100, 0.6)",
  "rgba(245, 52, 52, 0.7)",
  "rgba(245, 7, 7, 0.8)"
];
const makerColor = "rgba(255, 0, 255, 0.5)";
const startPosColor = "rgba(255, 165, 0, 0.5)";
const visBordersColor = "rgb(0, 255, 0)";
const bordersColor = "rgb(0, 0, 0)";
const fontColor = "rgb(0, 0, 255)";

const crModeOnOffFlag = document.getElementById("crModeOnOff");
const helpContent = document.getElementById("helpContent");
const gameAndEdit = document.getElementById("gameAndEdit");
const loadGameContent = document.getElementById("loadGameContent");
const recordsContent = document.getElementById("recordsContent");
const genJson = document.getElementById("genJson");
const levelName = document.getElementById("levelName");
const visibleArea = document.getElementById("visibleArea");
const playerLife = document.getElementById("playerLife");

let isFiedAcceptsKeys = true;
let isAlert = false;
let gs = new GameState();

window.addEventListener("keydown", keydown, false);
window.addEventListener("keyup", keyup, false);
crModeOnOffFlag.addEventListener("click", crModeOnOff);
document.getElementById("help").addEventListener("click", help);
document.getElementById("records").addEventListener("click", records);
document
  .getElementById("loadJsonFromBrowser")
  .addEventListener("click", loadJsonFromBrowserGame);
document
  .getElementById("loadJsonFromBrowserEdit")
  .addEventListener("click", loadJsonFromBrowserEdit);
document
  .getElementById("genSmallLevel")
  .addEventListener("click", genSmallLevel);
document
  .getElementById("genMediumLevel")
  .addEventListener("click", genMediumLevel);
document
  .getElementById("genLargeLevel")
  .addEventListener("click", genLargeLevel);
document.getElementById("crSmallLevel").addEventListener("click", crSmallLevel);
document
  .getElementById("crMediumLevel")
  .addEventListener("click", crMediumLevel);
document.getElementById("crLargeLevel").addEventListener("click", crLargeLevel);
document.getElementById("edCurrLevel").addEventListener("click", edCurrLevel);
document.getElementById("tryEdLevel").addEventListener("click", tryEdLevel);
document
  .getElementById("showLevelJson")
  .addEventListener("click", showLevelJson);
document
  .getElementById("loadLevelJsonEd")
  .addEventListener("click", loadLevelJsonEd);
document
  .getElementById("loadLevelJson")
  .addEventListener("click", loadLevelJson);
genJson.addEventListener("blur", genJsonLostFocus);
genJson.addEventListener("focus", controlGotFocus);
levelName.addEventListener("change", levelNameChanged);
levelName.addEventListener("blur", controlLostFocus);
levelName.addEventListener("focus", controlGotFocus);
visibleArea.addEventListener("change", visibleAreaChanged);
visibleArea.addEventListener("blur", controlLostFocus);
visibleArea.addEventListener("focus", controlGotFocus);
playerLife.addEventListener("change", playerLifeChanged);
playerLife.addEventListener("blur", controlLostFocus);
playerLife.addEventListener("focus", controlGotFocus);
document
  .getElementById("saveToBrowser")
  .addEventListener("click", saveToBrowser);

(function createPlayMenu() {
  let htmlForMenu =
    '<li><a onclick="playMainGame()" href="#">Play Main Game</a></li>';

  let genPlayMenu = document.getElementById("genPlayMenu");

  for (let i = 0; i < mainLevels.length; i++) {
    htmlForMenu += createMenuEntry(i, JSON.parse(mainLevels[i]).n);
  }

  genPlayMenu.innerHTML = htmlForMenu;
})();

function createMenuEntry(levNum, levName) {
  let genHtml =
    '<li><a href="#" ' +
    'onclick="loadMainLevelFromMenu(' +
    levNum +
    ')">' +
    levName +
    "</a></li>";
  return genHtml;
}

function GameState() {
  this.keyMap = {
    37: "left",
    38: "up",
    39: "right",
    40: "down",
    87: "upBorderW",
    65: "LeftBorderA",
    83: "downBorderS",
    68: "rightBorderD",
    90: "startPositionZ",
    88: "endPositionX",
    80: "generateLayerDataP"
  };

  this.pressedKeys = {
    left: false,
    right: false,
    up: false,
    down: false,
    // for Maker
    upBorderW: false,
    LeftBorderA: false,
    downBorderS: false,
    rightBorderD: false,
    startPositionZ: false,
    endPositionX: false
  };

  this.cellSize;
  this.cellSizeForDrawing;
  this.cellsAmount;
  this.visibleZone;
  this.borders = [];
  this.player;
  this.currentLevel;
  //0 - do nothing //1 main game //2 generated game //3 editing
  this.currentMode = 0;
  this.currentMainLevelNumber;
  this.mainGameFinishStats = [];
}

function loadJsonFromBrowserEdit() {
  loadJsonFromBrowser(3);
}

function loadJsonFromBrowserGame() {
  loadJsonFromBrowser(2);
}

function help() {
  stopGame();
  helpContent.style.display = "block";
  gameAndEdit.style.display = "none";
  loadGameContent.style.display = "none";
  recordsContent.style.display = "none";
}

function records() {
  stopGame();
  helpContent.style.display = "none";
  gameAndEdit.style.display = "none";
  loadGameContent.style.display = "none";
  recordsContent.style.display = "block";

  let getHtmlForRecord = function(recordEntry) {
    return (
      "<p>" +
      "<b>Name: </b>" +
      recordEntry.levelName +
      "<b> Life: </b>" +
      recordEntry.playerLife +
      "<b> Time: </b>" +
      recordEntry.timeElapsedString +
      "</p>"
    );
  };

  let records = [];

  for (let i = 0; i < localStorage.length; i++) {
    let key = localStorage.key(i);

    if (key.includes(storageRecordPrefix)) {
      records.push(JSON.parse(localStorage.getItem(key)));
    }
  }

  let re = /\D/g;

  records.sort((a, b) => {
    return (
      parseInt(a.levelName.replace(re, ""), 10) -
      parseInt(b.levelName.replace(re, ""), 10)
    );
  });

  let total = localStorage.getItem(storageMainChallengeKey);
  if (total) {
    records.push(JSON.parse(total));
  }

  if (records.length === 0) {
    recordsContent.innerHTML = "<h1>No records</h1>";
  } else {
    let htmlForRecord = "";

    for (let i = 0; i < records.length; i++) {
      htmlForRecord += getHtmlForRecord(records[i]);
    }

    recordsContent.innerHTML = "<h1>Records</h1>" + htmlForRecord;
  }
}

function loadSelectedLevelFromBrowser(levelKey, mode) {
  let levelData = localStorage.getItem(levelKey);
  let levelFromStorage = JSON.parse(JSON.parse(levelData).levelJson);
  stopGame();
  showGameAndEditArea();
  gs.currentMode = parseInt(mode);
  if (gs.currentMode === 2) {
    gs.currentLevel = levelFromStorage;
    gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
    gs.player = new Player(gs.currentLevel);
    runAnimation();
  } else {
    gs.currentLevel = levelFromStorage;
    gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
    gs.player = new Maker(gs.currentLevel);
    setControlsAfterLoadingLevel();
    runAnimation();
  }
}

function deleteSelectedLevelFromBrowser(levelKey) {
  let levelData = localStorage.removeItem(levelKey);
  let pToDelete = document.getElementById("p" + levelKey);
  pToDelete.parentNode.removeChild(pToDelete);
}

function loadJsonFromBrowser(mode) {
  stopGame();
  helpContent.style.display = "none";
  gameAndEdit.style.display = "none";
  loadGameContent.style.display = "block";
  recordsContent.style.display = "none";

  let getHtmlForLevel = function(levelEntry, entryKey) {
    let objLevel = JSON.parse(levelEntry.levelJson);

    let loadLink =
      "<a href=# " +
      'id="link' +
      entryKey +
      '" ' +
      'onclick="loadSelectedLevelFromBrowser(' +
      "'" +
      entryKey +
      "'," +
      mode +
      ')">Load' +
      "</a>";

    let deleteLink =
      "<a href=# " +
      'id="del' +
      entryKey +
      '" ' +
      'onclick="deleteSelectedLevelFromBrowser(' +
      "'" +
      entryKey +
      "'" +
      ')">Delete' +
      "</a>";

    return (
      "<p " +
      'id="p' +
      entryKey +
      '" ' +
      ">" +
      "<b>Name: </b>" +
      objLevel.n +
      "<b> Version: </b>" +
      levelEntry.version +
      " " +
      loadLink +
      " " +
      deleteLink +
      "</p>"
    );
  };

  let levels = [];

  for (let i = 0; i < localStorage.length; i++) {
    let key = localStorage.key(i);

    if (key.includes(storageLevelPrefix)) {
      levels.push([JSON.parse(localStorage.getItem(key)), key]);
    }
  }

  levels.sort((a, b) => {
    return a[0].version - b[0].version;
  });

  if (levels.length === 0) {
    loadGameContent.innerHTML = "<h1>No Saved Levels</h1>";
  } else {
    let htmlForRLevels = "";

    for (let i = 0; i < levels.length; i++) {
      htmlForRLevels += getHtmlForLevel(levels[i][0], levels[i][1]);
    }

    loadGameContent.innerHTML = "<h1>Levels</h1>" + htmlForRLevels;
  }
}

function showGameAndEditArea() {
  stopGame();
  helpContent.style.display = "none";
  gameAndEdit.style.display = "initial";
  loadGameContent.style.display = "none";
  recordsContent.style.display = "none";
}

function genJsonLostFocus() {
  genJson.value = "";
  isFiedAcceptsKeys = true;
}

function controlGotFocus() {
  isFiedAcceptsKeys = false;
}

function controlLostFocus() {
  isFiedAcceptsKeys = true;
}

function setControls() {
  levelName.value = genNameForLevel();
  visibleArea.value = 5;
  playerLife.value = 100;
}

function setControlsAfterLoadingLevel() {
  levelName.value = gs.currentLevel.n;
  visibleArea.value = gs.currentLevel.hl;
  visibleArea.max = gs.cellsAmount - 1;
  playerLife.value = gs.currentLevel.l;
}

function levelNameChanged() {
  if (levelName.value === "") levelName.value = genNameForLevel();
  gs.currentLevel.n = levelName.value;
}

function genNameForLevel() {
  return "New Level";
}

function visibleAreaChanged() {
  let visArea = parseInt(visibleArea.value);

  gs.currentLevel.hl = visArea;

  gs.visibleZone = visArea;
}

function playerLifeChanged() {
  let life = parseInt(playerLife.value);

  gs.currentLevel.l = life;

  gs.player.life = life;
}

function StorageLevelValue(levelName, version, levelJson) {
  this.levelName = levelName;
  this.version = version;
  this.levelJson = levelJson;
}

function saveToBrowser() {
  let constrJson = constructLevelJson();

  if (constrJson) {
    let storageLevelValue = new StorageLevelValue(
      constrJson.n,
      new Date().getTime(),
      JSON.stringify(constrJson)
    );

    let storageLevelEntryKey = storageLevelPrefix + storageLevelValue.version;

    localStorage.setItem(
      storageLevelEntryKey,
      JSON.stringify(storageLevelValue)
    );
    alert("Data saved to browser.");
  } else {
    alert("Nothing to export.");
  }
}

function constructLevelJson() {
  let levObjForJson;
  if (gs.player) {
    if (gs.player.isRealPlayer) {
      levObjForJson = gs.currentLevel;
    } else {
      levObjForJson = gs.player.makeEditedLayer(gs.player);
    }
    return levObjForJson;
  } else {
    return false;
  }
}

function showLevelJson() {
  let constrJson = constructLevelJson();

  if (constrJson) {
    alert(
      "Level JSON is ready. Copy it from JSON field and save it somewhere."
    );
    genJson.value = JSON.stringify(constrJson);
  } else {
    alert("Nothing to export");
  }
}

function loadLevelJsonEd() {
  showGameAndEditArea();
  let levObjForJsonFromUser = prompt("Paste level's JSON here", "");
  try {
    let levelToEdit = JSON.parse(levObjForJsonFromUser);

    if (!checkLoadedJson(levelToEdit)) throw Error("Wrong JSON");
    stopGame();
    gs.currentMode = 3;
    gs.currentLevel = levelToEdit;
    gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
    gs.player = new Maker(gs.currentLevel);
    setControlsAfterLoadingLevel();
    runAnimation();
  } catch (e) {
    alert("JSON is incorrect. Try arain, please.");
  }
}

function loadLevelJson() {
  showGameAndEditArea();
  let levObjForJsonFromUser = prompt("Paste level's JSON here", "");
  try {
    let levelToplay = JSON.parse(levObjForJsonFromUser);

    if (!checkLoadedJson(levelToplay)) throw Error("Wrong JSON");
    stopGame();
    gs.currentMode = 2; //like generated game
    gs.currentLevel = levelToplay;
    gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
    gs.player = new Player(gs.currentLevel);
    runAnimation();
  } catch (e) {
    alert("JSON is incorrect. Try arain, please.");
  }
}

function checkLoadedJson(pJ) {
  if (
    pJ &&
    typeof pJ === "object" &&
    pJ.n &&
    typeof pJ.n === "string" &&
    pJ.h &&
    typeof pJ.h === "string" &&
    pJ.v &&
    typeof pJ.v === "string" &&
    pJ.h.length === pJ.v.length &&
    pJ.s &&
    typeof pJ.s === "object" &&
    pJ.s.length === 2 &&
    pJ.e &&
    typeof pJ.e === "object" &&
    pJ.s.length === 2 &&
    pJ.l &&
    typeof pJ.l === "number" &&
    pJ.cs &&
    typeof pJ.cs === "number" &&
    (pJ.cs === 10 || pJ.cs === 15 || pJ.cs === 20) &&
    pJ.hl &&
    typeof pJ.hl === "number"
  )
    return true;
  return false;
}

function crModeOnOff() {
  stopGame();
  showGameAndEditArea();

  let tools = document.getElementById("createTools");
  let mainMenu = document.getElementById("mainMenu");
  let creatorModeMenu = document.getElementById("creatorModeMenu");
  if (crModeOnOffFlag.checked) {
    tools.style.display = "initial";
    mainMenu.style.display = "none";
    creatorModeMenu.style.display = "initial";
    setControls();
  } else {
    tools.style.display = "none";
    mainMenu.style.display = "initial";
    creatorModeMenu.style.display = "none";
  }
}

function draw() {
  ctcl();

  drawField();

  gs.player.draw(gs.player);
}

function update() {
  gs.player.checkState(gs.player);
}

function loop(timestamp) {
  if (gs.player && gs.player.isRealPlayer) gs.player.timeEnd = timestamp;
  if (gs.currentMode !== 0) {
    if (!isAlert) {
      update();
      draw();
    } else {
      ctcl();
    }
    window.requestAnimationFrame(loop);
  } else {
    ctcl();
    gs = new GameState();
  }
}

function keydown(event) {
  const key = gs.keyMap[event.keyCode];
  gs.pressedKeys[key] = true;
}
function keyup(event) {
  const key = gs.keyMap[event.keyCode];
  gs.pressedKeys[key] = false;
}

function getTimeElapsedString(duration) {
  let milliseconds = parseInt((duration % 1000) / 100);
  let seconds = Math.floor((duration / 1000) % 60);
  let minutes = Math.floor((duration / (1000 * 60)) % 60);
  let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);

  hours = hours < 10 ? "0" + hours : hours;
  minutes = minutes < 10 ? "0" + minutes : minutes;
  seconds = seconds < 10 ? "0" + seconds : seconds;

  return hours + ":" + minutes + ":" + seconds + "." + milliseconds;
}

const Level = function(n, h, v, s, e, l, cs, hl) {
  this.n = n; //level name
  this.h = h; //horizontal borders string
  this.v = v; //vertical borders string
  this.s = s; //start position [col, row]
  this.e = e; //end position [col, row]
  this.l = l; //amount of player's life
  this.cs = cs; //cell size for this Level 20 15 10
  this.hl = hl; //visible area 
};

let Player = function(level) {
  this.isRealPlayer = true;
  this.col = level.s[0];
  this.row = level.s[1];
  this.colNew = level.s[0];
  this.rowNew = level.s[1];

  this.step = 1;
  this.life = level.l;
  this.bonusAmount = level.b;
  this.endPositionForLevel = [level.e[0], level.e[1]];

  this.timeStart = performance.now();
  this.timeEnd;
  this.timeElapsed;
  this.timeElapsedString = "0:00:00";

  this.draw = function(player) {
    ctx.fillStyle = playerColor;
    ctx.fillRect(
      player.col * gs.cellSize + 2,
      player.row * gs.cellSize + 2,
      gs.cellSize - 3,
      gs.cellSize - 3
    );

    ctxData.font = "16px Arial";
    ctxData.fillStyle = fontColor;
    ctxData.fillText(
      level.n +
        " | Life: " +
        player.life +
        " | Time: " +
        player.timeElapsedString,
      6,
      heightD - 5
    );

    ctx.fillStyle = endPosColor;
    ctx.fillRect(
      player.endPositionForLevel[0] * gs.cellSize + 1,
      player.endPositionForLevel[1] * gs.cellSize + 1,
      gs.cellSize - 2,
      gs.cellSize - 2
    );
  };

  this.checkState = function(player) {
    let isWin = function() {
      if (
        player.endPositionForLevel[0] === player.col &&
        player.endPositionForLevel[1] === player.row
      )
        return true;

      return false;
    };

    let playerLostLife = function() {
      if (player.life <= 0) {
        player.life = 0;
        return true;
      }
      return false;
    };

    let xLeftCollision = function() {
      if (gs.borders[player.row][player.col].valV === 1) return true;

      return false;
    };

    let xRightCollision = function() {
      if (gs.borders[player.row][player.col + 1].valV === 1) return true;

      return false;
    };

    let yUpCollision = function() {
      if (gs.borders[player.row][player.col].valH === 1) return true;

      return false;
    };

    let yDownCollision = function() {
      if (gs.borders[player.row + 1][player.col].valH === 1) return true;

      return false;
    };
    if (isFiedAcceptsKeys) {
      if (gs.pressedKeys.left) {
        if (player.col === 0 || xLeftCollision()) {
        } else {
          player.colNew = player.col - player.step;
          gs.pressedKeys.left = false;
        }
      }
      if (gs.pressedKeys.right) {
        if (player.col === gs.cellsAmount - 1 || xRightCollision()) {
        } else {
          player.colNew = player.col + player.step;
          gs.pressedKeys.right = false;
        }
      }
      if (gs.pressedKeys.up) {
        if (player.row === 0 || yUpCollision()) {
        } else {
          player.rowNew = player.row - player.step;
          gs.pressedKeys.up = false;
        }
      }
      if (gs.pressedKeys.down) {
        if (player.row === gs.cellsAmount - 1 || yDownCollision()) {
        } else {
          player.rowNew = player.row + player.step;
          gs.pressedKeys.down = false;
        }
      }
    }

    if (gs.borders[player.row][player.col].visited === 0) {
      gs.borders[player.row][player.col].visited++;
    }

    if (
      (player.col !== player.colNew || player.row !== player.rowNew) &&
      gs.borders[player.rowNew][player.colNew].visited
    ) {
      player.life -= gs.borders[player.rowNew][player.colNew].visited;

      if (gs.borders[player.rowNew][player.colNew].visited <= 5) {
        gs.borders[player.rowNew][player.colNew].visited++;
      }
    }

    player.col = player.colNew;
    player.row = player.rowNew;

    if (isWin()) {
      if (gs.currentMode === 1) {
        mainGameFinishedLevelWin();
      }
      if (gs.currentMode === 2) {
        generatedGameWin();
      }
      if (gs.currentMode === 3) {
        tryGameWin();
      }
    }

    if (playerLostLife()) {
      if (gs.currentMode === 1) {
        mainGameFinishedLevelFail();
      }
      if (gs.currentMode === 2) {
        generatedGameLoose();
      }
      if (gs.currentMode === 3) {
        tryGameLoose();
      }
    }

    player.timeElapsedString = getTimeElapsedString(player.timeElapsed);
    player.timeElapsed = player.timeEnd - player.timeStart;
  };
};

let Maker = function(level) {
  this.isRealPlayer = false;
  this.col = level.s[0];
  this.row = level.s[1];
  this.colNew = level.s[0];
  this.rowNew = level.s[1];
  this.step = 1;
  this.startPositionForLevel = [level.s[0], level.s[1]];
  this.endPositionForLevel = [level.e[0], level.e[1]];
  this.life = level.l;
  this.cellSize = level.cs;
  this.makeEditedLayer = function(player) {
    let h = [];
    let v = [];

    for (let row = 0; row < gs.cellsAmount; row++) {
      for (let col = 0; col < gs.cellsAmount; col++) {
        h.push(gs.borders[row][col].valH);
        v.push(gs.borders[row][col].valV);
      }
    }

    let generatedLevel = new Level(
      gs.currentLevel.n,
      h.join(""),
      v.join(""),
      player.startPositionForLevel,
      player.endPositionForLevel,
      player.life,
      player.cellSize,
      gs.visibleZone
    );
    return generatedLevel;
  };
  this.draw = function(player) {
    ctx.fillStyle = makerColor;
    ctx.fillRect(
      player.col * gs.cellSize,
      player.row * gs.cellSize,
      gs.cellSize,
      gs.cellSize
    );

    ctx.fillStyle = startPosColor;
    ctx.fillRect(
      player.startPositionForLevel[0] * gs.cellSize,
      player.startPositionForLevel[1] * gs.cellSize,
      gs.cellSize,
      gs.cellSize
    );

    ctx.fillStyle = endPosColor;
    ctx.fillRect(
      player.endPositionForLevel[0] * gs.cellSize,
      player.endPositionForLevel[1] * gs.cellSize,
      gs.cellSize,
      gs.cellSize
    );

    ctx.strokeStyle = visBordersColor;
    ctx.setLineDash([5, 3]);
    ctx.beginPath();
    ctx.rect(
      (player.col - gs.visibleZone) * gs.cellSize,
      (player.row - gs.visibleZone) * gs.cellSize,
      (gs.visibleZone * 2 + 1) * gs.cellSize,
      (gs.visibleZone * 2 + 1) * gs.cellSize
    );
    ctx.stroke();
  };
  this.checkState = function(player) {
    if (isFiedAcceptsKeys) {
      if (gs.pressedKeys.left) {
        if (player.col === 0) {
        } else {
          player.colNew = player.col - player.step;
          gs.pressedKeys.left = false;
        }
      }
      if (gs.pressedKeys.right) {
        if (player.col === gs.cellsAmount - 1) {
        } else {
          player.colNew = player.col + player.step;
          gs.pressedKeys.right = false;
        }
      }
      if (gs.pressedKeys.up) {
        if (player.row === 0) {
        } else {
          player.rowNew = player.row - player.step;
          gs.pressedKeys.up = false;
        }
      }
      if (gs.pressedKeys.down) {
        if (player.row === gs.cellsAmount - 1) {
        } else {
          player.rowNew = player.row + player.step;
          gs.pressedKeys.down = false;
        }
      }
      if (gs.pressedKeys.upBorderW) {
        if (gs.borders[player.row][player.col].valH === 1) {
          gs.borders[player.row][player.col].valH = 0;
        } else {
          gs.borders[player.row][player.col].valH = 1;
        }
        gs.pressedKeys.upBorderW = false;
      }
      if (gs.pressedKeys.LeftBorderA) {
        if (gs.borders[player.row][player.col].valV === 1) {
          gs.borders[player.row][player.col].valV = 0;
        } else {
          gs.borders[player.row][player.col].valV = 1;
        }
        gs.pressedKeys.LeftBorderA = false;
      }
      if (gs.pressedKeys.downBorderS) {
        if (player.row + 1 < gs.cellsAmount) {
          if (gs.borders[player.row + 1][player.col].valH === 1) {
            gs.borders[player.row + 1][player.col].valH = 0;
          } else {
            gs.borders[player.row + 1][player.col].valH = 1;
          }
        }
        gs.pressedKeys.downBorderS = false;
      }
      if (gs.pressedKeys.rightBorderD) {
        if (player.col + 1 < gs.cellsAmount) {
          if (gs.borders[player.row][player.col + 1].valV === 1) {
            gs.borders[player.row][player.col + 1].valV = 0;
          } else {
            gs.borders[player.row][player.col + 1].valV = 1;
          }
        }
        gs.pressedKeys.rightBorderD = false;
      }
      if (gs.pressedKeys.startPositionZ) {
        player.startPositionForLevel[0] = player.col;
        player.startPositionForLevel[1] = player.row;

        gs.pressedKeys.startPositionZ = false;
      }

      if (gs.pressedKeys.endPositionX) {
        player.endPositionForLevel[0] = player.col;
        player.endPositionForLevel[1] = player.row;

        gs.pressedKeys.endPositionX = false;
      }
    }

    player.col = player.colNew;
    player.row = player.rowNew;
  };
};

let BorderInfo = function(valH, valV, x, y) {
  this.valH = valH;
  this.valV = valV;
  this.x = x;
  this.y = y;
  this.visited = 0;
};

function makeBordersAndSetCellParameters(level) {
  gs.cellSize = level.cs;
  gs.cellSizeForDrawing = gs.cellSize + gs.cellSize / 20;
  gs.cellsAmount = fieldSize / gs.cellSize;
  gs.visibleZone = level.hl;

  let valsCounter = 0;
  let makedBorders = [];
  for (let row = 0; row < gs.cellsAmount; row++) {
    makedBorders[row] = [];
    for (let col = 0; col < gs.cellsAmount; col++) {
      makedBorders[row].push(
        new BorderInfo(
          parseInt(level.h[valsCounter]),
          parseInt(level.v[valsCounter]),
          col * gs.cellSize,
          row * gs.cellSize
        )
      );
      valsCounter++;
    }
  }
  return makedBorders;
}

function generateMaze(cellSize) {
  let mSize = fieldSize / cellSize;

  let Cell = function(row, column) {
    this.valH = 1;
    this.valV = 1;
    this.visited = false;
    this.row = row;
    this.col = column;
  };

  let field = [];

  for (let row = 0; row < mSize; row++) {
    field[row] = [];
    for (let column = 0; column < mSize; column++) {
      field[row].push(new Cell(row, column));
    }
  }

  let stack = [];
  let currentCell = field[0][0];
  currentCell.visited = true;
  let visitedCellsCounter = 1;
  let freeCells = [];

  let nextCell;
  let tempNextCellArray;
  let randomIndex;

  while (visitedCellsCounter < mSize * mSize) {
    if (currentCell.row - 1 >= 0) {
      if (!field[currentCell.row - 1][currentCell.col].visited) {
        freeCells.push([field[currentCell.row - 1][currentCell.col], "U"]);
      }
    }

    if (currentCell.col - 1 >= 0) {
      if (!field[currentCell.row][currentCell.col - 1].visited) {
        freeCells.push([field[currentCell.row][currentCell.col - 1], "L"]);
      }
    }

    if (currentCell.row + 1 < mSize) {
      if (!field[currentCell.row + 1][currentCell.col].visited) {
        freeCells.push([field[currentCell.row + 1][currentCell.col], "D"]);
      }

      if (currentCell.col + 1 < mSize) {
        if (!field[currentCell.row][currentCell.col + 1].visited) {
          freeCells.push([field[currentCell.row][currentCell.col + 1], "R"]);
        }
      }
    }

    if (freeCells.length === 0) {
      currentCell = stack.shift();
    } else {
      randomIndex = Math.round(Math.random() * (freeCells.length - 1));

      tempNextCellArray = freeCells[randomIndex];

      nextCell = tempNextCellArray[0];

      if (tempNextCellArray[1] === "U") currentCell.valH = 0;
      if (tempNextCellArray[1] === "L") currentCell.valV = 0;
      if (tempNextCellArray[1] === "D") nextCell.valH = 0;
      if (tempNextCellArray[1] === "R") nextCell.valV = 0;

      stack.unshift(currentCell);

      currentCell = nextCell;

      currentCell.visited = true;
      visitedCellsCounter++;

      freeCells.length = 0;
    }
  }

  let h = [];
  let v = [];

  let valsCounter = 0;
  for (let row = 0; row < mSize; row++) {
    for (let col = 0; col < mSize; col++) {
      h[valsCounter] = field[row][col].valH;
      v[valsCounter] = field[row][col].valV;
      valsCounter++;
    }
  }

  let levelToReturn = new Level(
    "Generated Level",
    h.join(""),
    v.join(""),
    [0, 0],
    [mSize - 1, mSize - 1],
    mSize,
    cellSize,
    4
  );

  return levelToReturn;
}

function generateEmptyMaze(cellSize) {
  let mSize = fieldSize / cellSize;
  let h = [];
  let v = [];
  for (let row = 0; row < mSize; row++) {
    for (let col = 0; col < mSize; col++) {
      v.push(0);
      h.push(0);
    }
  }

  let levelToReturn = new Level(
    levelName.value !== "" ? levelName.value : genNameForLevel(),
    h.join(""),
    v.join(""),
    [0, 0],
    [mSize - 1, mSize - 1],
    100,
    cellSize,
    visibleArea.value
  );

  return levelToReturn;
}

function genSmallLevel() {
  showGameAndEditArea();
  generateNewLevel(20);
}

function genMediumLevel() {
  showGameAndEditArea();
  generateNewLevel(15);
}

function genLargeLevel() {
  showGameAndEditArea();
  generateNewLevel(10);
}

function generateNewLevel(size) {
  gs.currentMode = 2;

  gs.currentLevel = generateMaze(size);

  gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);

  gs.player = new Player(gs.currentLevel);

  runAnimation();
}

function crSmallLevel() {
  showGameAndEditArea();
  crNewLevel(20);
}

function crMediumLevel() {
  showGameAndEditArea();
  crNewLevel(15);
}

function crLargeLevel() {
  showGameAndEditArea();
  crNewLevel(10);
}

function crNewLevel(size) {
  gs.currentMode = 3;
  gs.currentLevel = generateEmptyMaze(size);
  gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
  gs.player = new Maker(gs.currentLevel);

  levelName.value = genNameForLevel();
  visibleArea.value = 5;
  visibleArea.max = gs.cellsAmount - 1;
  playerLife.value = 100;

  gs.visibleZone = parseInt(visibleArea.value);
  gs.player.life = parseInt(playerLife.value);
  runAnimation();
}

function edCurrLevel() {
  if (gs.currentMode === 3) {
    gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
    gs.player = new Maker(gs.currentLevel);
    runAnimation();
  }
}

function tryEdLevel() {
  if (gs.player && !gs.player.isRealPlayer) {
    gs.player.makeEditedLayer(gs.player);
    gs.currentLevel = gs.player.makeEditedLayer(gs.player);
    gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
    gs.player = new Player(gs.currentLevel);
    runAnimation();
  }
}

function tryLevelFinished() {
  gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
  gs.player = new Player(gs.currentLevel);
  runAnimation();
}

function runAnimation() {
  window.requestAnimationFrame(loop);
}

function drawField() {
  for (let row = 0; row < gs.cellsAmount; row++) {
    for (let col = 0; col < gs.cellsAmount; col++) {
      if (
        (row <= gs.player.row + gs.visibleZone &&
          row >= gs.player.row - gs.visibleZone &&
          col <= gs.player.col + gs.visibleZone &&
          col >= gs.player.col - gs.visibleZone) ||
        !gs.player.isRealPlayer
      ) {
        if (gs.borders[row][col].valV === 1) {
          ctx.fillStyle = bordersColor;
          ctx.fillRect(
            gs.borders[row][col].x,
            gs.borders[row][col].y,
            borderWidth,
            gs.cellSizeForDrawing
          );
        }

        if (
          row < gs.cellsAmount - gs.visibleZone &&
          row === gs.player.row + gs.visibleZone
        ) {
          if (gs.borders[row + 1][col].valH === 1) {
            ctx.fillStyle = bordersColor;
            ctx.fillRect(
              gs.borders[row + 1][col].x,
              gs.borders[row + 1][col].y,
              gs.cellSizeForDrawing,
              borderWidth
            );
          }
        }

        if (
          col < gs.cellsAmount - gs.visibleZone &&
          col === gs.player.col + gs.visibleZone
        ) {
          if (gs.borders[row][col + 1].valV === 1) {
            ctx.fillStyle = bordersColor;
            ctx.fillRect(
              gs.borders[row][col + 1].x,
              gs.borders[row][col + 1].y,
              borderWidth,
              gs.cellSizeForDrawing
            );
          }
        }

        if (gs.borders[row][col].valH === 1) {
          ctx.fillStyle = bordersColor;
          ctx.fillRect(
            gs.borders[row][col].x,
            gs.borders[row][col].y,
            gs.cellSizeForDrawing,
            borderWidth
          );
        }

        if (gs.borders[row][col].visited > 0) {
          let fst = visitedColors[gs.borders[row][col].visited - 1];

          ctx.fillStyle = fst;
          ctx.fillRect(
            gs.borders[row][col].x + 2,
            gs.borders[row][col].y + 2,
            gs.cellSize - 3,
            gs.cellSize - 3
          );
        }
      }
    }
  }

  ctx.fillStyle = bordersColor;

  ctx.fillRect(0, 0, fieldSizeForDrawing, borderWidth);
  ctx.fillRect(0, 0, borderWidth, fieldSizeForDrawing);
  ctx.fillRect(0, fieldSize, fieldSizeForDrawing, borderWidth);
  ctx.fillRect(fieldSize, 0, borderWidth, fieldSizeForDrawing);
}

function playMainGame() {
  showGameAndEditArea();
  gs.currentMode = 1;
  gs.currentMainLevelNumber = 0;
  loadMainGameLevel(gs.currentMainLevelNumber);
}

function loadMainLevelFromMenu(levNum) {
  showGameAndEditArea();
  gs.currentMode = 2;
  gs.currentMainLevelNumber = levNum;
  gs.currentLevel = JSON.parse(mainLevels[levNum]);
  gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
  gs.player = new Player(gs.currentLevel);
  runAnimation();
}

function loadMainGameLevel(levelNumber) {
  gs.currentLevel = JSON.parse(mainLevels[levelNumber]);
  gs.borders = makeBordersAndSetCellParameters(gs.currentLevel);
  gs.player = new Player(gs.currentLevel);
  runAnimation();
}

function StorageRecordValue(
  levelName,
  playerLife,
  timeElapsedString,
  timeElapsed
) {
  this.levelName = levelName;
  this.playerLife = playerLife;
  this.timeElapsedString = timeElapsedString;
  this.timeElapsed = timeElapsed;
}

function mainGameFinishedLevelWin() {
  let storageRecordEntryKey = storageRecordPrefix + gs.currentLevel.n;

  let storedLevelRecord = localStorage.getItem(storageRecordEntryKey);

  let storageRecordValue = new StorageRecordValue(
    gs.currentLevel.n,
    gs.player.life,
    gs.player.timeElapsedString,
    gs.player.timeElapsed
  );

  gs.mainGameFinishStats.push(storageRecordValue);

  if (storedLevelRecord) {
    let storagedLevelObj = JSON.parse(storedLevelRecord);
    if (storageRecordValue.playerLife > storagedLevelObj.playerLife) {
      localStorage.setItem(
        storageRecordEntryKey,
        JSON.stringify(storageRecordValue)
      );
    }
  } else {
    localStorage.setItem(
      storageRecordEntryKey,
      JSON.stringify(storageRecordValue)
    );
  }

  gs.currentMainLevelNumber++;
  if (gs.currentMainLevelNumber >= mainLevels.length) {
    saveMainGameStats();

    showMessageWithTimeout(function() {
      alert("You Win!" + dataForAlert() + " Main Challenge Finished!");
      isAlert = false;
      stopGame();
    });
  } else {
    showMessageWithTimeout(function() {
      alert("You Win!" + dataForAlert());
      isAlert = false;
      loadMainGameLevel(gs.currentMainLevelNumber);
    });
  }
}

function saveMainGameStats() {
  let mainGameFinishRating = gs.mainGameFinishStats.reduce(
    (accumulator, currentValue) => {
      accumulator.playerLife = accumulator.playerLife + currentValue.playerLife;
      accumulator.timeElapsed =
        accumulator.timeElapsed + currentValue.timeElapsed;
      return accumulator;
    },
    { levelName: "", playerLife: 0, timeElapsedString: "", timeElapsed: 0 }
  );

  mainGameFinishRating.levelName = "Complete Main Challenge";

  mainGameFinishRating.timeElapsedString = getTimeElapsedString(
    mainGameFinishRating.timeElapsed
  );

  let storedMainGameRecord = localStorage.getItem(storageMainChallengeKey);

  if (storedMainGameRecord) {
    let storagedRecordObj = JSON.parse(storedMainGameRecord);
    if (mainGameFinishRating.playerLife > storagedRecordObj.playerLife) {
      localStorage.setItem(
        storageMainChallengeKey,
        JSON.stringify(mainGameFinishRating)
      );
    }
  } else {
    localStorage.setItem(
      storageMainChallengeKey,
      JSON.stringify(mainGameFinishRating)
    );
  }
}

function dataForAlert() {
  return (
    " Player's life: " +
    gs.player.life +
    ". Elapsed time: " +
    gs.player.timeElapsedString +
    "."
  );
}

function ctcl() {
  ctx.clearRect(0, 0, width, height);
  ctxData.clearRect(0, 0, widthD, heightD);
}

function showMessageWithTimeout(func) {
  isAlert = true;
  ctcl();
  setTimeout(func, 20);
}

function mainGameFinishedLevelFail() {
  showMessageWithTimeout(function() {
    alert("You Lose! Loading the level again..." + dataForAlert());
    isAlert = false;
    loadMainGameLevel(gs.currentMainLevelNumber);
  });
}

function generatedGameWin() {
  showMessageWithTimeout(function() {
    alert("You Win!" + dataForAlert());
    isAlert = false;
    stopGame();
  });
}

function generatedGameLoose() {
  showMessageWithTimeout(function() {
    alert("You Lose!" + dataForAlert());
    isAlert = false;
    stopGame();
  });
}

function tryGameWin() {
  showMessageWithTimeout(function() {
    alert("You Win! Loading the same level again." + dataForAlert());
    isAlert = false;
    tryLevelFinished();
  });
}

function tryGameLoose() {
  showMessageWithTimeout(function() {
    alert("You Lose! Loading the same level again." + dataForAlert());
    isAlert = false;
    tryLevelFinished();
  });
}

function stopGame() {
  gs.currentMode = 0;
}